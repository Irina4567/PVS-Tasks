#include "gtest/gtest.h"

#include "main.h"
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
TEST(Test, Test_foofail)
{
<<<<<<< HEAD
	auto i = stoi("123"); //ÔÂÓ·‡ÁÛÂÚ ÒÚÓÍÛ ‚ ˜ËÒÎÓ, ÂÒÎË 

	if (i)
	{
		auto s = to_string(i);
	}
	std::optional<std::string> opt_string{ "fds" };
	if (opt_string) {
		std::size_t s = opt_string->size();
	}


	optional<string> o{ "234" };

	std::optional<int> io = o.and_then(stoi);

	//monadic_optional<string> opt{"123"};
	//


	//EXPECT_EQ(r, 2);
}

//TEST(Test, Test_sort1)
//{
//	list<int> a{ 1, 3, 2 };
//	sort(a);
//	//EXPECT_EQ(sort(a), {1, 2, 3});
//}
=======
	std::optional<int> opt; 
	if (opt) //—ç—Ç—É —à—Ç—É–∫—É —Å–æ–∫—Ä–∞—â–∞—é –Ω–∏–∂–µ
	{
		std::optional<int> b = cat(*opt); //–ï—Å–ª–∏ opt –Ω–µ False, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ cat
	}

	monadic_optional<int> opt2; //–û–±—ä–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ and_then
	monadic_optional<int> t = opt2.and_then(cat); //–ó–¥–µ—Å—å –æ—à–∏–±–∫–∞, error_type –¥–ª—è cat, –∏ –¥–ª—è cat –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
	
	
	
	
	//EXPECT_EQ(b.foo(10), 10);
}
>>>>>>> b07b037b92d0356dfa87ecbf60b0da3f652e1e8e
